blueprint:
  name: ğŸ”” Alerte tempÃ©rature basse (tous capteurs)
  description: >
    Notifie quand n'importe quel capteur de tempÃ©rature passe sous le seuil.
    Une seule notif par descente, pas de rÃ©pÃ©tition tant que la tempÃ©rature
    de la piÃ¨ce n'est pas repassÃ©e au-dessus du seuil.
  domain: automation
  input:
    seuil:
      name: Seuil de tempÃ©rature (Â°C)
      default: 18
      selector:
        number:
          min: 5
          max: 30
          unit_of_measurement: Â°C
          mode: slider
    notify_devices:
      name: Appareils Ã  notifier (mobile_app)
      description: SÃ©lectionne un ou plusieurs appareils pour recevoir la notification
      selector:
        device:
          integration: mobile_app
          multiple: true

mode: parallel
max_exceeded: silent

trigger:
  - platform: state
    entity_id: all

condition:
  - condition: template
    value_template: >
      {% set s = trigger.to_state %}
      {% set f = trigger.from_state %}
      {% set seuil = (blueprint.inputs.seuil | float(18)) %}
      {{ s is not none
         and s.domain == 'sensor'
         and s.attributes.device_class == 'temperature'
         and s.state not in ['unknown','unavailable','None','nan']
         and (s.state | float(100) < seuil)
         and (
           f is none
           or f.state in ['unknown','unavailable','None','nan']
           or (f.state | float(100)) >= seuil
         ) }}

action:
  - variables:
      piece: "{{ area_name(trigger.entity_id) or state_attr(trigger.entity_id, 'friendly_name') or trigger.entity_id }}"
      t: "{{ trigger.to_state.state | float(0) }}"
      seuil: "{{ blueprint.inputs.seuil }}"
  - repeat:
      for_each: !input notify_devices
      sequence:
        - device_id: "{{ repeat.item }}"
          domain: mobile_app
          type: notify
          title: "Alerte tempÃ©rature"
          message: "ğŸ¥¶ {{ piece }} est Ã  {{ '%.1f'|format(t) }}Â°C (sous {{ seuil }}Â°C)."
