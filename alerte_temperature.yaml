blueprint:
  name: Surveillance Temp√©rature - Alerte Seuil Bas
  description: >-
    Envoie une notification lorsqu'un capteur de temp√©rature descend en dessous d'un seuil d√©fini.
    Permet de choisir des appareils sp√©cifiques ou d'envoyer √† tous les appareils.
  domain: automation
  author: Assistant Claude
  homeassistant:
    min_version: 2025.9.0
  input:
    temperature_sensors:
      name: Capteurs de Temp√©rature
      description: S√©lectionnez les capteurs de temp√©rature √† surveiller
      selector:
        entity:
          multiple: true
          filter:
            - domain: sensor
              device_class: temperature
    
    temperature_threshold:
      name: Seuil de Temp√©rature (¬∞C)
      description: Temp√©rature en dessous de laquelle d√©clencher l'alerte
      default: 15
      selector:
        number:
          min: -20
          max: 50
          step: 0.5
          unit_of_measurement: "¬∞C"
    
    notification_mode:
      name: Mode de Notification
      description: Choisir comment envoyer les notifications
      default: "specific_devices"
      selector:
        select:
          options:
            - label: "Appareils sp√©cifiques"
              value: "specific_devices"
            - label: "Tous les appareils"
              value: "all_devices"
    
    notification_devices:
      name: Appareils de Notification
      description: Appareils qui recevront les notifications (uniquement si "Appareils sp√©cifiques" est s√©lectionn√©)
      default: []
      selector:
        device:
          multiple: true
          filter:
            - integration: mobile_app
    
    notification_title:
      name: Titre de la Notification
      description: Titre personnalis√© pour la notification
      default: "üå°Ô∏è Alerte Temp√©rature Basse"
      selector:
        text:
    
    notification_message:
      name: Message de Notification
      description: >-
        Message personnalis√©. Variables disponibles:
        {{sensor_name}} - Nom du capteur
        {{temperature}} - Temp√©rature actuelle  
        {{threshold}} - Seuil configur√©
      default: "Le capteur {{sensor_name}} indique {{temperature}}¬∞C (seuil: {{threshold}}¬∞C)"
      selector:
        text:
          multiline: true
    
    cooldown_minutes:
      name: D√©lai entre Notifications (minutes)
      description: √âvite le spam de notifications pour le m√™me capteur
      default: 30
      selector:
        number:
          min: 5
          max: 240
          step: 5
          unit_of_measurement: "min"

variables:
  notification_mode_var: !input notification_mode
  notification_devices_var: !input notification_devices
  threshold: !input temperature_threshold
  title: !input notification_title
  message_template: !input notification_message
  cooldown: !input cooldown_minutes

trigger:
  - platform: numeric_state
    entity_id: !input temperature_sensors
    below: !input temperature_threshold
    for:
      minutes: 2

condition:
  - condition: template
    value_template: >-
      {% set sensor_id = trigger.entity_id %}
      {% set last_trigger_var = 'last_temp_alert_' ~ sensor_id.replace('.', '_') %}
      {% set last_trigger = as_timestamp(states('input_datetime.' ~ last_trigger_var), 0) %}
      {% set current_time = as_timestamp(now()) %}
      {% set cooldown_seconds = (cooldown * 60) %}
      {{ (current_time - last_trigger) > cooldown_seconds }}

action:
  # Mise √† jour du timestamp pour ce capteur
  - service: input_datetime.set_datetime
    target:
      entity_id: "input_datetime.last_temp_alert_{{ trigger.entity_id.replace('.', '_') }}"
    data:
      datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
    continue_on_error: true
  
  # Pr√©paration des variables du message
  - variables:
      sensor_name: "{{ state_attr(trigger.entity_id, 'friendly_name') or trigger.entity_id }}"
      temperature: "{{ trigger.to_state.state | round(1) }}"
      final_message: >-
        {{ message_template 
           | replace('{{sensor_name}}', sensor_name)
           | replace('{{temperature}}', temperature)
           | replace('{{threshold}}', threshold | string) }}
  
  # Notification selon le mode choisi
  - choose:
      # Mode: Appareils sp√©cifiques
      - conditions:
          - condition: template
            value_template: "{{ notification_mode_var == 'specific_devices' }}"
        sequence:
          - repeat:
              for_each: "{{ notification_devices_var }}"
              sequence:
                - service: notify.mobile_app_{{ device_attr(repeat.item, 'name') | lower | replace(' ', '_') | replace('-', '_') }}
                  data:
                    title: "{{ title }}"
                    message: "{{ final_message }}"
                    data:
                      priority: high
                      notification_icon: "mdi:thermometer-alert"
                      color: "#FF5722"
                      channel: "Temperature Alerts"
                      importance: high
                  continue_on_error: true
      
      # Mode: Tous les appareils  
      - conditions:
          - condition: template
            value_template: "{{ notification_mode_var == 'all_devices' }}"
        sequence:
          - service: notify.notify
            data:
              title: "{{ title }}"
              message: "{{ final_message }}"
              data:
                priority: high
                notification_icon: "mdi:thermometer-alert"
                color: "#FF5722"
                channel: "Temperature Alerts"
                importance: high

  # Log de l'√©v√©nement
  - service: logbook.log
    data:
      name: "Surveillance Temp√©rature"
      message: "Alerte d√©clench√©e pour {{ sensor_name }}: {{ temperature }}¬∞C (seuil: {{ threshold }}¬∞C)"
      entity_id: "{{ trigger.entity_id }}"
